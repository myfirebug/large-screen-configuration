import Mock from "mockjs";
export const elements = {
  url: "/elements",
  method: "get",
  data: {
    result: true,
    data: [
      {
        id: Mock.mock("@guid"),
        name: "基础文本",
        url: "",
        element: "baseText",
        code: "baseText",
        type: "text",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 1,
        column: 1,
      },
      {
        id: Mock.mock("@guid"),
        name: "带icon文本",
        url: "",
        element: "baseText",
        code: "iconText",
        type: "text",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 1,
        column: 1,
      },
      {
        id: Mock.mock("@guid"),
        name: "滚动消息",
        url: "",
        element: "messageText",
        code: "messageText",
        type: "text",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 1,
        column: 1,
      },
      {
        id: Mock.mock("@guid"),
        name: "基础折线图",
        url: "",
        element: "line",
        code: "baseLine",
        type: "line",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "基础平滑折线图",
        url: "",
        element: "line",
        code: "baseSmoothLine",
        type: "line",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "基础面积图",
        url: "",
        element: "line",
        code: "baseAreaLine",
        type: "line",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "折线图堆叠",
        url: "",
        element: "line",
        code: "stackedLine",
        type: "line",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "堆叠面积图",
        url: "",
        element: "line",
        code: "stackedAreaLine",
        type: "line",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "垂直折线图",
        url: "",
        element: "line",
        code: "lengthwaysLine",
        type: "line",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "基础柱状图",
        url: "",
        element: "bar",
        code: "baseBar",
        type: "bar",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "坐标轴刻度与标签对齐",
        url: "",
        element: "bar",
        code: "axisAlignWithTickBar",
        type: "bar",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "带背景色的柱状图",
        url: "",
        element: "bar",
        code: "backgroundColorBar",
        type: "bar",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "圆角柱状图",
        url: "",
        element: "bar",
        code: "radiusBar",
        type: "bar",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "堆积柱状图",
        url: "",
        element: "bar",
        code: "stackBar",
        type: "bar",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "纵向柱状图",
        url: "",
        element: "bar",
        code: "lengthwaysBar",
        type: "bar",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "数字滚动",
        url: "",
        element: "countUp",
        code: "countUp",
        type: "text",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
      {
        id: Mock.mock("@guid"),
        name: "基础饼图",
        url: "",
        element: "pie",
        code: "basePie",
        type: "pie",
        createTime: Mock.mock('@date("yyyy-MM-dd")'),
        count: Mock.mock('@string("number", 5)'),
        x: 0,
        y: 0,
        row: 2,
        column: 2,
      },
    ],
    message: "获取组建列表成功",
  },
};
